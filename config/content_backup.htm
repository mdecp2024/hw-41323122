<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-41323122">https://github.com/mdecp2024/hw-41323122</a></p>
<p><a href="https://github.com/mdecp2024/hw-mdecycu"></a>個人網站:<a href="https://mdecp2024.github.io/hw-41323122/content/index.html">https://mdecp2024.github.io/hw-41323122/content/index.html</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="514" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/4VrOu9BOkYU" title="cp hw   Google Chrome 2024 10 24 14 59 27" width="968"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="514" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/c5-I-ahfPhE" title="cp hw   Google Chrome 2024 10 24 18 44 59" width="968"></iframe></p>
<h3>w10</h3>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/NjS0asnu4X8?si=atRtNmyJVhixdbO-" title="YouTube video player" width="560"></iframe></p>
<p>心得；第一題是講程式一（金字塔）分別帶入Brython 頁面、SciTE 編輯器、命令提示字元視窗、Jupyter Lab 以及 Codespaces 環境中執行,其中brython及Cadespaces都是建立新檔案並將程式匯入，而剩下三個必須求出知道自己檔案所存取的位置才能將程式匯入，一開始看就密密麻麻的英文有點慌張不過冷靜下來去讀上面的意思會發現其實沒有那麼複雜所以要是英文的閱讀能力且步驟的進行都需要細心思考在進行</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/35QT2Wib-7Y?si=UUCJvZ-G3yDyIDaa" title="YouTube video player" width="560"></iframe></p>
<p><span>請問 Python 程式中有關變數的命名, 除了必須以"_", 以及英文大小寫字母開頭之外, 還有甚麼需要特別注意的地方? 與所謂的"關鍵字"(</span><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/9d7d4227cc13cdad06544e3960c90a1adfb5c388/python_keywords.py">Keywords</a><span>)有關係嗎? 請實際舉例</span></p>
<p><span>答</span></p>
<p>在 Python 中，變數命名需要遵守以下規則：</p>
<ol>
<li>
<p><strong>不能使用關鍵字</strong>：如 <code>if</code>, <code>else</code>, <code>while</code> 等，這些都是 Python 的保留字，無法用作變數名稱。</p>
</li>
<li>
<p><strong>不能以數字開頭</strong>：變數名稱必須以字母或底線（<code>_</code>）開頭，不能以數字開頭。</p>
</li>
<li>
<p><strong>只能包含字母、數字和底線</strong>：變數名稱中只能包含英文字母、數字和底線，不能包含其他符號或空格。</p>
</li>
<li>
<p><strong>大小寫敏感</strong>：Python 是大小寫敏感的，這意味著 <code>myVar</code> 和 <code>myvar</code> 被視為兩個不同的變數。</p>
</li>
<li>
<p><strong>避免使用容易混淆的字母</strong>：如 <code>l</code>（小寫字母L）、<code>O</code>（大寫字母O）和 <code>I</code>（大寫字母I），因為它們容易與數字 <code>1</code> 和 <code>0</code> 混淆。</p>
</li>
<li>
<p><strong>命名慣例</strong>：通常使用 <code>snake_case</code>（小寫字母加底線）來命名變數和函數；<code>CamelCase</code> 用於類別名稱；常數則使用全大寫字母（<code>UPPERCASE</code>）。</p>
</li>
</ol>
<p>總結來說，變數命名需要遵循基本語法規則，並盡量使用清晰且具描述性的名稱，避免與 Python 保留字和內建函數名稱衝突。</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/sLA4tpDn9B4?si=b0gSam8BGBz8uHcI" title="YouTube video player" width="560"></iframe></p>
<p>心得；<span>這次是特過 Brython 頁面、SciTE 編輯器、命令提示字元視窗、Jupyter Lab 以及 Codespaces去驗算微積分及物理題目，雖然還不太熟悉但透過gpt慢慢了解做出來了，獲得蠻多經驗的</span></p>
<h3>w11_hw</h3>
<p>以下影片說明如何利用近端可攜系統維護個人作業網站:</p>
<p></p>
<p>1.  已知可以用 Python 程式<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a>, 或<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</p>
<p>第一題解答:<a href="https://mdecp2024.github.io/hw-41323122/content/Brython.html?src=https://gist.githubusercontent.com/41323122/42b27f9e2aff61203823fff0ac7b8975/raw/4934e6686ca31dfb91c641cbbbafe190543585e6/w11.py">*號圓形</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import math

# 圓心 (5, 5) 和半徑 4
center_x = 5
center_y = 5
radius = 4

# 10x10 的字元區域
size = 10

for y in range(size):
    row = ''
    for x in range(size):
        # 計算 (x, y) 到圓心的距離，若距離小於等於半徑則印星號
        if math.sqrt((x - center_x) ** 2 + (y - center_y) ** 2) &lt;= radius:
            row += '＊'
        else:
            row += '　'  # 全形空格
    print(row)
</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">　　　　　　　　　　　　
　　　　　＊　　　　
　　　＊＊＊＊＊　　
　　＊＊＊＊＊＊＊　
　　＊＊＊＊＊＊＊　
　＊＊＊＊＊＊＊＊＊
　　＊＊＊＊＊＊＊　
　　＊＊＊＊＊＊＊　
　　　＊＊＊＊＊　　
　　　　　＊　　　　

</pre>
<p>2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</p>
<p>第二題解答:<a href="https://mdecp2024.github.io/hw-41323122/content/Brython.html?src=https://gist.githubusercontent.com/41323122/41612309ee43a944bc4ab996dd416fab/raw/a8954ec9d2b2b7409d7368cf0d69de1bab564e8c/w11-2.py">網頁上的方格與塗色</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 每一格的 pixel 數
gs = 20

# 定義畫布與格子大小
width, height = 10, 10  # 共 10x10 的方格
ctx = canvas.getContext("2d")

def dRect(lux, luy, w, h, s=1, c='lightgrey'):
    """繪製單格的矩形框"""
    ctx.lineWidth = s
    ctx.strokeStyle = c
    ctx.beginPath()
    ctx.rect(lux, luy, w, h)
    ctx.stroke()

def grid(width, height, grid_pix):
    """繪製方格網格"""
    for i in range(width):
        for j in range(height):
            dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1)

def fill(x, y, color):
    """填滿指定格子"""
    ctx.fillStyle = color
    ctx.fillRect(x * gs, y * gs, gs, gs)

# 繪製整個方格
grid(width, height, gs)

# 定義圓心與半徑（單位：格子）
center_x, center_y = 5, 5  # 圓心在第 5 格 (索引從 0 開始)
radius = 4

# 繪製圓形區域
for x in range(width):
    for y in range(height):
        # 計算中心到格子中心的距離
        distance = ((x + 0.5 - center_x) ** 2 + (y + 0.5 - center_y) ** 2) ** 0.5
        if distance &lt;= radius:  # 如果距離小於等於半徑，填滿格子
            fill(x, y, "black")
</pre>
<p><img alt="" height="224" src="/images/下載.png" width="224"/></p>
<p>3. 完成上列題目後, 請利用 Youtube 影片<span>簡報</span>個人的解題過程與心得.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/gEQ3yxgcUeI?si=k5WQnijebehgRqRL" title="YouTube video player" width="560"></iframe></p><h3>w12_hw</h3>
<p><span>請各組組員分別利用 </span><span>Brython 以及 Jupyter lab</span><span> 環境, 執行</span><a href="http://229.cycu.org/python_2025_lite.7z">可攜程式</a><span> notebook 目錄中的 </span><span>01_string_input_print.ipynb 至 10_for_search.ipynb</span><span> 筆記本程式, 完成後請將能在 Brython 執行的程式碼存入個人 </span><span>Gist</span><span> 後, 將各程式執行連結放入 w12_hw 網頁上. 最後請說明各範例中所使用的程式語法以及執行心得.</span></p>
<p><span>第五題:</span>05_list_index_pop_insert</p>
<p>範例:<a href="https://mdecp2024.github.io/hw-41323122/content/Brython.html?src=https://gist.githubusercontent.com/41323122/f06151c764c365ae40c1369241fdc15b/raw/101ab2f63c7a969c4af5a19179626bdc3302cb4d/w12-5.py">點菜</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">todays_menu = ["burger", "salad", "coke"]                   #設定一個串列到變數裡
print(todays_menu)                                                    #列印todays_menu變數
side_dish_index = todays_menu.index("salad")            #使用index尋找串列裡有沒有相同的元素
print (side_dish_index)                                               #如果有則顯示1反之顯示錯誤信息
todays_menu.pop(side_dish_index)                             #使用index所回傳的值"1"後再利用pop刪除索引值"1"的元素
print (todays_menu)                                                   #列印刪除元素過後的串列
todays_menu.insert(side_dish_index, "fries")              #使用index所回傳的值"1"後再利用insert加入索引值為"1"的新元素
print (todays_menu)                                                   #列印加入元素過後的串列</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">['burger', 'salad', 'coke']
1
['burger', 'coke']
['burger', 'fries', 'coke']</pre>
<p>第六題:06_list_slicing</p>
<p>範例:<a href="https://mdecp2024.github.io/hw-41323122/content/Brython.html?src=https://gist.githubusercontent.com/41323122/9ab2666eb326ccfa5b7e40d1045f148f/raw/99be3822ee10db191b477d6637cc97841f0590e2/w12-6.py">城市</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">cities = ["San Diego", "Prague", "Cape Town", "Tokyo", "Melbourne"]#設定一個串列
print (cities)       #列印串列裡的元素
print (cities[1])    #印出串列裡索引值1的元素
print (cities[1:4])  #印出串列裡索引值1~3的元素
print (cities[1:4:2])#印出串列裡索引值範圍1~4,間隔2的元素
print (cities[0:3])  #印出串列裡索引值0~2的元素
print (cities[:3])   #未設定起始索引值默認取0開始,印出串列裡索引值0~2的元素
print (cities[2:5])  #印出串列裡索引值2~4的元素
print (cities[2:])   #未設定末端索引值默認取到最後,印出串列裡索引值2~最後的元素
print (cities[0:5:2])#印出串列裡索引值範圍0~4,間隔2的元素
print (cities[::2])  #印出串列裡索引值從0開始,間隔2的元素
print (cities[4])    #印出串列裡索引值4的元素
print (cities[-1])   #印出串列裡索引值從後面往前數第1個的元素
print (cities[-4:-1])#印出串列裡索引值從後面往前數第4個開始,從後面往前數第2個結束的元素
cities[3:0:-1]       # 從索引值3（"Tokyo"）往前取值到索引值1（"Prague"），不包含索引值0，步長為-1（倒序取值）
cities[-2:-5:-1]     # 從倒數第2個元素（"Tokyo"）往前取值到倒數第5個元素（"San Diego"），不包含倒數第5個，步長為-1
print (cities[::-1]) # 倒序列印整個串列的元素</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">['San Diego', 'Prague', 'Cape Town', 'Tokyo', 'Melbourne']
Prague
['Prague', 'Cape Town', 'Tokyo']
['Prague', 'Tokyo']
['San Diego', 'Prague', 'Cape Town']
['San Diego', 'Prague', 'Cape Town']
['Cape Town', 'Tokyo', 'Melbourne']
['Cape Town', 'Tokyo', 'Melbourne']
['San Diego', 'Cape Town', 'Melbourne']
['San Diego', 'Cape Town', 'Melbourne']
Melbourne
Melbourne
['Prague', 'Cape Town', 'Tokyo']
['Melbourne', 'Tokyo', 'Cape Town', 'Prague', 'San Di</pre>
<p>第七題</p>
<p>07_list_slicing_use</p>
<p>範例:<a href="https://mdecp2024.github.io/hw-41323122/content/Brython.html?src=https://gist.githubusercontent.com/41323122/9ab2666eb326ccfa5b7e40d1045f148f/raw/c4bd9e302c7d737e7067596db0553d6d3c07f8fe/w12-7.py">列表操作與切片範例</a></p>
<p><span>說明:</span></p>
<p>列表操作：包括元素替換、插入、切片、添加和刪除。</p>
<p>切片功能：使用範圍（<code>start:end</code>）或步長（<code>start:end:step</code>）選取元素。</p>
<p>刪除列表：<code>del</code><span> </span>可用於刪除特定元素或整個列表。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義感官列表
senses = ["eyes", "nose", "ears", "tongue", "skin"]
print(senses)  # 輸出: ['eyes', 'nose', 'ears', 'tongue', 'skin']

# 將第二個元素 (索引1) 替換為 "smell"
senses[1] = "smell"
print(senses)  # 輸出: ['eyes', 'smell', 'ears', 'tongue', 'skin']

# 將第四和第五個元素替換為 "taste" 和 "touch"
senses[3:5] = ["taste", "touch"]
print(senses)  # 輸出: ['eyes', 'smell', 'ears', 'taste', 'touch']

# 使用步長切片替換第一和第三個元素
senses[0:3:2] = ["sight", "hearing"]
print(senses)  # 輸出: ['sight', 'smell', 'hearing', 'taste', 'touch']

# 定義行星列表
planets = ["Mercury", "Mars", "Earth", "Neptune"]
print(planets)  # 輸出: ['Mercury', 'Mars', 'Earth', 'Neptune']

# 將 "Jupiter" 添加到列表中
planets = planets + ["Jupiter"]
print(planets)  # 輸出: ['Mercury', 'Mars', 'Earth', 'Neptune', 'Jupiter']

# 在 "Mars" 和 "Earth" 之間插入 "Venus"
planets = planets[0:2] + ["Venus"] + planets[2:5]
print(planets)  # 輸出: ['Mercury', 'Mars', 'Venus', 'Earth', 'Neptune', 'Jupiter']

# 在 "Jupiter" 之前添加 "Uranus" 和 "Saturn"
planets = planets[:5] + ["Uranus", "Saturn"] + planets[5:]
print(planets)  # 輸出: ['Mercury', 'Mars', 'Venus', 'Earth', 'Neptune', 'Uranus', 'Saturn', 'Jupiter']

# 定義房間列表
house = ["kitchen", "dining room", "living room", "bedroom", "bathroom", "garden", "balcony", "terrace"]
print(house)  # 輸出: ['kitchen', 'dining room', 'living room', 'bedroom', 'bathroom', 'garden', 'balcony', 'terrace']

# 刪除第二個元素 (索引1)
del house[1]
print(house)  # 輸出: ['kitchen', 'living room', 'bedroom', 'bathroom', 'garden', 'balcony', 'terrace']

# 刪除索引4和5的元素
del house[4:6]
print(house)  # 輸出: ['kitchen', 'living room', 'bedroom', 'bathroom', 'terrace']

# 使用切片刪除每隔一個的元素
del house[::2]
print(house)  # 輸出: ['living room', 'bathroom']

# 刪除整個 house 列表
del house

# 嘗試打印已刪除的列表會引發錯誤
print(house)  # NameError: name 'house' is not defined
</pre>
<p><span></span></p><h3>w13_hw</h3>
<p><a href="https://mdecp2024.github.io/hw-41323122/content/Brython.html?src=https://gist.githubusercontent.com/41323122/f4624798f590262605c9dd5faee10bd2/raw/603d0e5ca50158a004641d729250a523bb266069/w13-1.py">繪製藍色斜線</a></p>
<p><a href="https://mdecp2024.github.io/hw-41323122/content/Brython.html?src=https://gist.githubusercontent.com/41323122/f4624798f590262605c9dd5faee10bd2/raw/603d0e5ca50158a004641d729250a523bb266069/w13-1.py"><!-- 導入 brython 程式庫 --></a></p>
<p><a href="https://mdecp2024.github.io/hw-41323122/content/Brython.html?src=https://gist.githubusercontent.com/41323122/f4624798f590262605c9dd5faee10bd2/raw/603d0e5ca50158a004641d729250a523bb266069/w13-1.py">
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</a></p>
<p><a href="https://mdecp2024.github.io/hw-41323122/content/Brython.html?src=https://gist.githubusercontent.com/41323122/f4624798f590262605c9dd5faee10bd2/raw/603d0e5ca50158a004641d729250a523bb266069/w13-1.py">
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</a></p>
<div id="brython_div1">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 導入 brython 程式庫 --&gt;
&lt;p&gt;
&lt;script src="/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;script&gt;// &lt;![CDATA[
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
// ]]&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;div id="brython_div1"&gt;&lt;/div&gt;
&lt;script type="text/python3"&gt;// &lt;![CDATA[
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=600, height=600)  # 調整畫布大小以容納圓形
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1


# 2. 繪製對角線 (藍色) - 只連接第一個矩形的左上角和第一個矩形的右下角
ctx.strokeStyle = 'blue'  # 設定對角線顏色為藍色
ctx.beginPath()
ctx.moveTo(100, 100)  # 起點為第一個矩形的左上角 (100, 100)
ctx.lineTo(300, 300)  # 終點為第一個矩形的右下角 (300, 300)
ctx.stroke()</pre>
</div>
<p><a href="https://mdecp2024.github.io/hw-41323122/content/Brython.html?src=https://gist.githubusercontent.com/41323122/d84f591e25b1a68f0ed1c5c05cf55566/raw/337fccbac50a78621a9ea81879594d302a250be8/w13-2.py">在下列圖形中的兩個正方形外圍, 以黑色畫筆畫圓, 並設法在各線條所圍成的封閉區域塗上不同顏色</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math
   
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas
   
ctx = canvas.getContext("2d")
ctx.lineWidth = 4
  
#混色的
ctx.globalCompositeOperation = "screem"
  
  
#黑邊圓*2(每個畫四個邊邊)
ctx.strokeStyle = 'black'
#第一個圓
ctx.beginPath()
ctx.arc(160, 160, 141, 0.25 * math.pi,0.75 * math.pi)
ctx.fillStyle = "Turquoise"
ctx.fill()
ctx.stroke()
  
ctx.beginPath()
ctx.arc(160, 160, 141, 0.75 * math.pi,1.25 * math.pi)
ctx.fillStyle = "Tomato"
ctx.fill()
ctx.stroke()
  
ctx.beginPath()
ctx.arc(160, 160, 141, 1.25 * math.pi,1.75 * math.pi)
ctx.fillStyle = "SpringGreen"
ctx.fill()
ctx.stroke()
  
ctx.beginPath()
ctx.arc(160, 160, 141, 1.75 * math.pi,0.25 * math.pi)
ctx.fillStyle = "FloralWhite"
ctx.fill()
ctx.stroke()
  
#第二個圓
ctx.beginPath()
ctx.arc(260, 260, 141, 1.25 * math.pi,1.75 * math.pi)
ctx.fillStyle = "Purple"
ctx.fill()
ctx.stroke()
  
ctx.beginPath()
ctx.arc(260, 260, 141, 1.75 * math.pi,0.25 * math.pi)
ctx.fillStyle = "OliveDrab"
ctx.fill()
ctx.stroke()
  
ctx.beginPath()
ctx.arc(260, 260, 141, 0.25 * math.pi,0.75 * math.pi)
ctx.fillStyle = "Orange"
ctx.fill()
ctx.stroke()
  
ctx.beginPath()
ctx.arc(260, 260, 141, 0.75 * math.pi,1.25 * math.pi)
ctx.fillStyle = "MediumVioletRed"
ctx.fill()
ctx.stroke()
  
  
#紅方形*2(4個三角形)
ctx.strokeStyle = 'Purple'
ctx.beginPath()
ctx.moveTo(60,60)
ctx.lineTo(60,260)
ctx.lineTo(260,260)
ctx.fillStyle = "Gold"
ctx.fill()
ctx.stroke()
  
ctx.beginPath()
ctx.moveTo(60,60)
ctx.lineTo(260,60)
ctx.lineTo(260,260)
ctx.fillStyle = "Indigo"
ctx.fill()
ctx.stroke()
  
ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(360,160)
ctx.lineTo(360,360)
ctx.fillStyle = "Cyan"
ctx.fill()
ctx.stroke()
  
ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(160,360)
ctx.lineTo(360,360)
ctx.fillStyle = "CornflowerBlue"
ctx.fill()
ctx.stroke()
  
   
#重疊的小方型
ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(160,260)
ctx.lineTo(260,260)
ctx.fillStyle = "MediumOrchid"
ctx.fill()
ctx.stroke()
  
ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(260,160)
ctx.lineTo(260,260)
ctx.fillStyle = "SlateBlue"
ctx.fill()
ctx.stroke()
  
  
#藍斜線
ctx.strokeStyle = 'blue'
ctx.beginPath() 
ctx.moveTo(60, 60)
ctx.lineTo(260, 260)
ctx.stroke()</pre>
<p></p>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=600, height=600)  # 調整畫布大小以容納圓形
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1


from browser import html
from browser import document as doc
import math
   
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas
   
ctx = canvas.getContext("2d")
ctx.lineWidth = 4
  
#混色的
ctx.globalCompositeOperation = "screem"
  
  
#黑邊圓*2(每個畫四個邊邊)
ctx.strokeStyle = 'black'
#第一個圓
ctx.beginPath()
ctx.arc(160, 160, 141, 0.25 * math.pi,0.75 * math.pi)
ctx.fillStyle = "Turquoise"
ctx.fill()
ctx.stroke()
  
ctx.beginPath()
ctx.arc(160, 160, 141, 0.75 * math.pi,1.25 * math.pi)
ctx.fillStyle = "Tomato"
ctx.fill()
ctx.stroke()
  
ctx.beginPath()
ctx.arc(160, 160, 141, 1.25 * math.pi,1.75 * math.pi)
ctx.fillStyle = "SpringGreen"
ctx.fill()
ctx.stroke()
  
ctx.beginPath()
ctx.arc(160, 160, 141, 1.75 * math.pi,0.25 * math.pi)
ctx.fillStyle = "FloralWhite"
ctx.fill()
ctx.stroke()
  
#第二個圓
ctx.beginPath()
ctx.arc(260, 260, 141, 1.25 * math.pi,1.75 * math.pi)
ctx.fillStyle = "Purple"
ctx.fill()
ctx.stroke()
  
ctx.beginPath()
ctx.arc(260, 260, 141, 1.75 * math.pi,0.25 * math.pi)
ctx.fillStyle = "OliveDrab"
ctx.fill()
ctx.stroke()
  
ctx.beginPath()
ctx.arc(260, 260, 141, 0.25 * math.pi,0.75 * math.pi)
ctx.fillStyle = "Orange"
ctx.fill()
ctx.stroke()
  
ctx.beginPath()
ctx.arc(260, 260, 141, 0.75 * math.pi,1.25 * math.pi)
ctx.fillStyle = "MediumVioletRed"
ctx.fill()
ctx.stroke()
  
  
#紅方形*2(4個三角形)
ctx.strokeStyle = 'Purple'
ctx.beginPath()
ctx.moveTo(60,60)
ctx.lineTo(60,260)
ctx.lineTo(260,260)
ctx.fillStyle = "Gold"
ctx.fill()
ctx.stroke()
  
ctx.beginPath()
ctx.moveTo(60,60)
ctx.lineTo(260,60)
ctx.lineTo(260,260)
ctx.fillStyle = "Indigo"
ctx.fill()
ctx.stroke()
  
ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(360,160)
ctx.lineTo(360,360)
ctx.fillStyle = "Cyan"
ctx.fill()
ctx.stroke()
  
ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(160,360)
ctx.lineTo(360,360)
ctx.fillStyle = "CornflowerBlue"
ctx.fill()
ctx.stroke()
  
   
#重疊的小方型
ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(160,260)
ctx.lineTo(260,260)
ctx.fillStyle = "MediumOrchid"
ctx.fill()
ctx.stroke()
  
ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(260,160)
ctx.lineTo(260,260)
ctx.fillStyle = "SlateBlue"
ctx.fill()
ctx.stroke()
  
  
#藍斜線
ctx.strokeStyle = 'blue'
ctx.beginPath() 
ctx.moveTo(60, 60)
ctx.lineTo(260, 260)
ctx.stroke()
</script>
</p><h3>w14_ex</h3>
<p>程式:<a href="https://mdecp2024.github.io/hw-41323122/content/Brython.html?src=https://gist.githubusercontent.com/41323122/95c61939a03db0c1bf6d55058f2aa743/raw/088e157218450bcb6c9464c6bf58f5cb6cb43b44/w14.py">輸入座標畫圓</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random
import math

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]  # 獲取指定 id 的 div 元素
    brython_div &lt;= canvas  # 將 canvas 插入到該 div 中
    
    ctx = canvas.getContext("2d")
    
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    """
    生成一個隨機的 RGB 顏色字符串。
    """
    r = random.randint(0, 255)  
    g = random.randint(0, 255)  
    b = random.randint(0, 255)  
    return f"rgb({r}, {g}, {b})"  

# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    """
    判斷一個點 (px, py) 是否位於圓 (cx, cy, r) 內。
    """
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2

# 使用者設定的圓心坐標和半徑，并進行塗色
def draw_circles(circles):
    """
    根據傳入的圓列表，繪制圓形並使用塗色法填充區域。
    """
    canvas, ctx = initialize_canvas(400, 400)
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    
    color_dict = {}
    
    for py in range(0, canvas.height):
        for px in range(0, canvas.width):
            in_circles = [is_point_in_circle(px, py, cx, cy, r) for cx, cy, r in circles]
            
            area = None
            if sum(in_circles) == 3:
                area = "intersection_all"
            elif in_circles[0] and in_circles[1]:
                area = "intersection_1_2"
            elif in_circles[0] and in_circles[2]:
                area = "intersection_1_3"
            elif in_circles[1] and in_circles[2]:
                area = "intersection_2_3"
            elif in_circles[0]:
                area = "circle1"
            elif in_circles[1]:
                area = "circle2"
            elif in_circles[2]:
                area = "circle3"
            else:
                area = "background"
            
            if area not in color_dict:
                color_dict[area] = random_color_generator() if area != "background" else "white"
            
            ctx.fillStyle = color_dict[area]
            ctx.fillRect(px, py, 1, 1)

# 使用者輸入圓心和半徑
circles = []
for i in range(3):
    x = int(input(f"輸入圓{i+1}的x坐標: "))
    y = int(input(f"輸入圓{i+1}的y坐標: "))
    r = int(input(f"輸入圓{i+1}的半徑: "))
    circles.append((x, y, r))

# 呼叫畫圓函式，並繪製三個圓
draw_circles(circles)
</pre>
<p></p><h3>w15</h3>
<p>題目一:<a href="https://mdecp2024.github.io/hw-41323122/content/Brython.html?src=https://gist.githubusercontent.com/41323122/4abbf0d751ebcad7514f5147e090aa9f/raw/6594be25309f05e3af3dd4d1e9161a55e2a48123/w15.py">從1累加到100</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">sum = 0

for i in range(0,101):
    sum += i
print(sum)</pre>
<p><span>題目二:<a href="https://mdecp2024.github.io/hw-41323122/content/Brython.html?src=https://gist.githubusercontent.com/41323122/4abbf0d751ebcad7514f5147e090aa9f/raw/aad16ef1c1c412238786ca42a673fbf4e4856e4e/w15-2.py">addto</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def addto(x,y):
  sum = 0
  for i in range(x,y+1):
    sum += i  
  print(sum)

addto(0,100)</pre>
<p>題目三:<a href="https://mdecp2024.github.io/hw-41323122/content/Brython.html?src=https://gist.githubusercontent.com/41323122/4abbf0d751ebcad7514f5147e090aa9f/raw/bb5ac3d0cc7534ef8c22cf495780d602025ff4f3/w15-3.py">add_only_even</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def add_only_even(x,y):
  sum = 0
  for i in range(x+1,y+1,2):
    sum += i  
    print(sum)
 
add_only_even(0,100)</pre>
<p>題目四:<a href="https://mdecp2024.github.io/hw-41323122/content/Brython.html?src=https://gist.githubusercontent.com/41323122/4abbf0d751ebcad7514f5147e090aa9f/raw/16a6414dc3a22d9fba61ffe581ee20c499c90d17/w15-4.py">add_avoid_8</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def avoid8(init, addto):
    total = 0
    for i in range(init, addto + 1):
        # 判斷數值中是否有 "8"
        if "8" in str(i):
            continue  # 跳過包含 "8" 的數字
        total += i  # 累加不包含 "8" 的數字
    print(total)  # 顯示最終結果

# 測試函式
avoid8(1, 100)</pre>
<p><span></span></p>
<p>延伸:<a href="https://mdecp2024.github.io/hw-41323122/content/Brython.html?src=https://gist.githubusercontent.com/41323122/4abbf0d751ebcad7514f5147e090aa9f/raw/6402a098ed0cded691a7462bba822675d6ba1bdd/w15-4_2.py">跳過3跟8</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def avoid8(init, addto):
    total = 0
    for i in range(init, addto + 1):
        # 判斷數值中是否有 "8" 或 "3"
        if "8" in str(i) or "3" in str(i):
            continue  # 跳過包含 "3" 或 "8" 的數字
        total += i
    print(total)  # 顯示最終結果

# 測試函式
avoid8(1, 100)</pre>
<p></p><h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p><h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p>    </p>
<p>   </p>
<h3>w16_exam1</h3>
<p><a href="https://mdecp2024.github.io/hw-41323122/content/Brython.html?src=https://gist.githubusercontent.com/41323122/a6eaf23eef788ce4ee3268645bd6658e/raw/00ad5cf5b7b944f9a20347cc5b4b05788ba5f5f7/w16.py">anchor </a></p>
<p><span>以</span><span>自己的學號最後四碼</span><span>作為繪圖的座標原點,  並以 pixel=2 的黑色直線分別利用 Brython 繪圖, 標示出向右為正的 X 軸, 以及向下為正的 Y 軸, 並且利用文字標示出原點座標 , 之後請自選最左側圖形的起始點座標, 直接在頁面畫出下列圖像, 繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出。</span></p>
<p><span></span></p>
<p><!-- 導入 brython 程式庫 --></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
from math import pi, sin, cos, sqrt

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=900, height=300)  # 調整畫布大小
brython_div = doc["brython_div1"]  # 確保 HTML 中有 id="brython_div1" 的元素
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 2
ctx.strokeStyle = 'black'

# 原點座標
origin_x, origin_y = 31, 22
pixel = 2  # 設定單位為 2 像素

# 繪製 x 軸
ctx.beginPath()
ctx.moveTo(0, origin_y)  # x 軸起點
ctx.lineTo(canvas.width, origin_y)  # x 軸終點
ctx.strokeStyle = "gray"
ctx.stroke()

# 繪製 y 軸
ctx.beginPath()
ctx.moveTo(origin_x, 0)  # y 軸起點
ctx.lineTo(origin_x, canvas.height)  # y 軸終點
ctx.strokeStyle = "gray"
ctx.stroke()

# 標示原點座標
ctx.font = "12px Arial"
ctx.fillStyle = "black"
ctx.fillText(f"({origin_x}, {origin_y})", origin_x + 5, origin_y - 5)

# 繪製橙色六邊形（邊長為 40 像素）
ctx.beginPath()
for i in range(6):
    angle = pi / 3 * i
    x = origin_x + (40 * pixel) * cos(angle)  # 改變六邊形大小
    y = origin_y + (40 * pixel) * sin(angle)
    if i == 0:
        ctx.moveTo(x + (50 * pixel), y + (50 * pixel))
    else:
        ctx.lineTo(x + (50 * pixel), y + (50 * pixel))
ctx.closePath()
ctx.fillStyle = "orange"
ctx.fill()

# 繪製綠色菱形（在六邊形的右側，距離原點約 125 像素）
ctx.beginPath()
ctx.moveTo(origin_x + (125 * pixel), origin_y + (15 * pixel))  # 菱形基準點
ctx.lineTo(origin_x + (145 * pixel), origin_y + (50 * pixel))
ctx.lineTo(origin_x + (125 * pixel), origin_y + (85 * pixel))
ctx.lineTo(origin_x + (105 * pixel), origin_y + (50 * pixel))
ctx.closePath()
ctx.fillStyle = "green"
ctx.fill()

# 繪製藍色正三角形（在菱形的右側，距離原點約 150 像素）
triangle_side = 40  # 正三角形邊長
height = (sqrt(3) / 2) * triangle_side  # 正三角形高度
ctx.beginPath()
ctx.moveTo(origin_x + (150 * pixel), origin_y + (50 * pixel))  # 頂點
ctx.lineTo(origin_x + (150 * pixel) - (triangle_side / 2) * pixel, origin_y + (50 * pixel) + (height * pixel))  # 左下頂點
ctx.lineTo(origin_x + (150 * pixel) + (triangle_side / 2) * pixel, origin_y + (50 * pixel) + (height * pixel))  # 右下頂點
ctx.closePath()
ctx.fillStyle = "blue"
ctx.fill()

# 繪製粉紅色圓形（在正三角形的右側，距離原點約 200 像素）
ctx.beginPath()
ctx.arc(origin_x + (200 * pixel), origin_y + (50 * pixel), (20 * pixel), 0, 2 * pi)  # 圓形的中心點
ctx.fillStyle = "magenta"
ctx.fill()

# 繪製黃色正方形（在圓形的右側，距離原點約 250 像素）
ctx.beginPath()
ctx.rect(origin_x + (250 * pixel), origin_y + (30 * pixel), (40 * pixel), (40 * pixel))  # 正方形的左上角
ctx.fillStyle = "yellow"
ctx.fill()

# 繪製深藍色矩形（在正方形的右側，距離原點約 310 像素）
ctx.beginPath()
ctx.rect(origin_x + (310 * pixel), origin_y + (40 * pixel), (60 * pixel), (20 * pixel))  # 矩形的左上角
ctx.fillStyle = "darkblue"
ctx.fill()
</script>
</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/mfHUACkF0kY?si=6DA6VAvqgoOZYANg" title="YouTube video player" width="560"></iframe></p><h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p><h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w9</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#help(range)
for i in range(1,6,2):
    print(i)
def print_pyramid(n):
    for i in range(n):
        # 打印空格
        print(' ' * (n - i - 1), end='')
        # 打印星号
        print('*' * (2 * i + 1))
        # 设置金字塔的高度
height = 5
print_pyramid(height)
</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">1
3
5
    *
   ***
  *****
 *******
*********</pre>
<p><br/><br/><br/></p>
<p><br/><br/></p>
<h3>w9</h3>
<p><img alt="" height="301" src="/images/螢幕擷取畫面 2024-10-16 220524.png" width="579"/><img alt="" height="324" src="/images/螢幕擷取畫面 (14).png" width="577"/></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from coppeliasim_zmqremoteapi_client import RemoteAPIClient
import time
import keyboard

# 利用 zmqRemoteAPI 以 23000 對場景伺服器進行連線
client = RemoteAPIClient('192.168.0.11', 23000)
# 以 getObject 方法取得場景物件
sim = client.getObject('sim')
box = sim.getObject('/box')

# 啟動模擬
sim.startSimulation()

# 設定立方體的尺寸和初始位置
cube_size = 0.2  # 20 cm
spacing = 0.5  # 50 cm 之間的距離（可根據需求調整）

# 擺放立方體的行數和每行的數量
rows = 5  # 從第 1 行到第 5 行
cubes_in_row = [1, 3, 5, 7, 9]  # 每行立方體的數量

# 在正的 Y 方向擺放立方體
for row in range(rows):
    # 計算每行的起始 x 位置，讓其對稱
    start_row_x = - (cubes_in_row[row] - 1) * spacing / 2
    
    for col in range(cubes_in_row[row]):
        # 計算每個立方體的位置
        x_position = start_row_x + col * spacing
        y_position = row * spacing  # 垂直方向上每行間距
        
        # 建立立方體
        cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size, cube_size, cube_size], 0)
        sim.setObjectPosition(cube_handle, -1, [x_position, y_position, cube_size / 2])  # z 方向上升到立方體的中心

# 在負的 Y 方向擺放立方體
for row in range(rows):
    # 計算每行的起始 x 位置，讓其對稱
    start_row_x = - (cubes_in_row[row] - 1) * spacing / 2
    
    for col in range(cubes_in_row[row]):
        # 計算每個立方體的位置
        x_position = start_row_x + col * spacing
        y_position = -row * spacing  # 負的 Y 方向
        
        # 建立立方體
        cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size, cube_size, cube_size], 0)
        sim.setObjectPosition(cube_handle, -1, [x_position, y_position, cube_size / 2])  # z 方向上升到立方體的中心

# 完成立方體的擺放
print("立方體已成功擺放!")

# 設定主迴圈
while True:
    # 在這裡可以進行其他模擬操作
    time.sleep(0.1)  # 確保循環不會過快

    if keyboard.is_pressed('q'):
        # 可以按下 q 鍵跳出重複執行迴圈
        break

# 終止模擬
sim.stopSimulation()</pre>
<p></p>
<h3>w16_exam2</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/AEj0GUUrDPM?si=yli9QiGLDYeTvpJ6" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://mdecp2024.github.io/hw-41323122/content/Brython.html?src=https://gist.githubusercontent.com/41323122/88261d2941e3f67cc9c74ee70027c2b3/raw/d5d72ab6ecb46cc0292aac75ff006e56466f971a/w16-2.py">迷宮</a></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=600, height=600)  # 調整畫布大小以容納圓形
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1
from browser import html
from browser import document as doc

# 初始化畫布
def create_canvas(id="brython_div1", width=550, height=550):
    """
    初始化畫布，並插入到指定的 HTML 容器中。
    返回畫布及其 2D 繪圖上下文。
    """
    # 建立一個 Canvas 元素
    canvas = html.CANVAS(id="maze_canvas", width=width, height=height)
    # 將 Canvas 插入到指定的 HTML 元素中
    doc[id] <= canvas
    return canvas, canvas.getContext("2d")

# 繪製迷宮
def draw_maze(ctx, origin_x=31, origin_y=22):
    """
    根據原點繪製迷宮，並用紅色標記起始座標。
    """
    # 設定起始點的標記文字（紅色）
    ctx.font = "12px Arial"  # 字體大小和樣式
    ctx.fillStyle = "red"  # 填充文字顏色為紅色
    ctx.fillText(f"({origin_x}, {origin_y})", origin_x + 5, origin_y - 5)  # 在起始點附近標示文字

    # 設定藍色線條樣式
    ctx.strokeStyle = "blue"  # 設定線條顏色為藍色
    ctx.lineWidth = 2  # 設定線條寬度為 2

    # 定義迷宮的所有線條座標 (起點 x1, y1 到 終點 x2, y2)
    lines = [
        # 水平線條
        (origin_x, origin_y, 200, origin_y),
        (300, origin_y, 500, origin_y),
        (150, 100, 400, 100),
        (150, 300, 400, 300),
        (origin_x, 500, 200, 500),
        (300, 500, 500, 500),
        (200, 400, 300, 400),
        (origin_x, 200, 200, 200),

        # 垂直線條
        (origin_x, origin_y, origin_x, 500),
        (500, origin_y, 500, 500),
        (200, 100, 200, 200),
        (400, 100, 400, 200),
        (300, 200, 300, 300),
        (400, 300, 400, 500),
        (200, 400, 200, 500),
        (150, 300, 150, 400),
    ]

    # 開始繪製線條
    ctx.beginPath()
    for x1, y1, x2, y2 in lines:
        ctx.moveTo(x1, y1)  # 移動到線條的起點
        ctx.lineTo(x2, y2)  # 畫到線條的終點
    ctx.stroke()  # 實際繪製所有的線條

# 主程式執行
def main():
    """
    主函式：負責初始化畫布，並繪製迷宮。
    """
    # 初始化畫布，指定畫布大小為 550x550 並加入到 id="brython_div1" 的 HTML 元素中
    canvas, ctx = create_canvas()

    # 繪製迷宮，設定原點為 (31, 22)
    draw_maze(ctx, origin_x=31, origin_y=22)

# 執行主程式
main()
</script><h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p><h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam3</h3>
<p><a href="https://mdecp2024.github.io/hw-41323122/content/Brython.html?src=https://gist.githubusercontent.com/41323122/61b48a683e99eac593a4cfb132b83ffa/raw/ce3d90ef0d392c77969d3dbed69b40b2e86b5750/w16-3.py">迷宮出口</a></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=600, height=600)  # 調整畫布大小以容納圓形
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1
from browser import html
from browser import document as doc

# 初始化畫布
def create_canvas(id="brython_div1", width=550, height=550):
    """
    初始化畫布，並插入到指定的 HTML 容器中。
    返回畫布及其 2D 繪圖上下文。
    """
    canvas = html.CANVAS(id="maze_canvas", width=width, height=height)
    doc[id] <= canvas
    return canvas, canvas.getContext("2d")

# 繪製迷宮
def draw_maze(ctx, origin_x=31, origin_y=22):
    """
    根據原點繪製迷宮，並用紅色標記起始座標。
    """
    # 設定起始點的標記文字（紅色）
    ctx.font = "12px Arial"
    ctx.fillStyle = "red"
    ctx.fillText(f"({origin_x}, {origin_y})", origin_x + 5, origin_y - 5)

    # 設定黑色線條樣式
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2

    # 定義迷宮的所有線條座標 (起點 x1, y1 到 終點 x2, y2)
    lines = [
        # 水平線條
        (origin_x, origin_y, 200, origin_y),
        (300, origin_y, 500, origin_y),
        (150, 100, 400, 100),
        (150, 300, 400, 300),
        (origin_x, 500, 200, 500),
        (300, 500, 500, 500),
        (200, 400, 300, 400),
        (origin_x, 200, 200, 200),
        # 垂直線條
        (origin_x, origin_y, origin_x, 500),
        (500, origin_y, 500, 500),
        (200, 100, 200, 200),
        (400, 100, 400, 200),
        (300, 200, 300, 300),
        (400, 300, 400, 500),
        (200, 400, 200, 500),
        (150, 300, 150, 400),
    ]

    # 開始繪製線條
    ctx.beginPath()
    for x1, y1, x2, y2 in lines:
        ctx.moveTo(x1, y1)
        ctx.lineTo(x2, y2)
    ctx.stroke()

# 自動尋找出口路徑
def find_path():
    """
    定義從原點自動尋找出口的路徑，避免與牆壁重疊。
    """
    # 手動設計的路徑，確保不與牆壁重疊
    return [
        (225, 0), (225, 50), (425, 50), (425, 225),
        (320, 225), (325, 125), (225, 125), (225, 225),(75, 225),(75, 425),
        (150, 425), (150, 325),(325, 325),(325, 425),(225, 425),(225, 500), # 出口點
    ]

# 繪製路徑
def draw_path(ctx, path, origin_x=31, origin_y=22):
    """
    繪製從入口到出口的路徑。
    """
    ctx.strokeStyle = "red"
    ctx.lineWidth = 2
    ctx.beginPath()
    for i, (x, y) in enumerate(path):
        if i == 0:
            ctx.moveTo(x + origin_x, y + origin_y)
        else:
            ctx.lineTo(x + origin_x, y + origin_y)
    ctx.stroke()

# 主程式執行
def main():
    """
    主函式：負責初始化畫布，並繪製迷宮及路徑。
    """
    # 初始化畫布，指定大小為 550x550
    canvas, ctx = create_canvas(width=550, height=550)

    # 繪製迷宮，設定原點為 (31, 22)
    draw_maze(ctx, origin_x=31, origin_y=22)

    # 自動尋找出口的路徑
    path = find_path()

    # 繪製路徑
    draw_path(ctx, path, origin_x=31, origin_y=22)

# 執行主程式
main()
</script><h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p><h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>