var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼:  ldodwua \n 個人倉儲: https://github.com/mdecp2024/hw-41323122 \n 個人網站: https://mdecp2024.github.io/hw-41323122/content/index.html \n 其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'w7', 'text': '\n \n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w10', 'text': '\n \n 心得；第一題是講程式一（金字塔）分別帶入Brython 頁面、SciTE 編輯器、命令提示字元視窗、Jupyter Lab 以及 Codespaces 環境中執行,其中brython及Cadespaces都是建立新檔案並將程式匯入，而剩下三個必須求出知道自己檔案所存取的位置才能將程式匯入，一開始看就密密麻麻的英文有點慌張不過冷靜下來去讀上面的意思會發現其實沒有那麼複雜所以要是英文的閱讀能力且步驟的進行都需要細心思考在進行 \n \n 請問 Python 程式中有關變數的命名, 除了必須以"_", 以及英文大小寫字母開頭之外, 還有甚麼需要特別注意的地方? 與所謂的"關鍵字"( Keywords )有關係嗎? 請實際舉例 \n 答 \n 在 Python 中，變數命名需要遵守以下規則： \n \n \n 不能使用關鍵字 ：如  if ,  else ,  while  等，這些都是 Python 的保留字，無法用作變數名稱。 \n \n \n 不能以數字開頭 ：變數名稱必須以字母或底線（ _ ）開頭，不能以數字開頭。 \n \n \n 只能包含字母、數字和底線 ：變數名稱中只能包含英文字母、數字和底線，不能包含其他符號或空格。 \n \n \n 大小寫敏感 ：Python 是大小寫敏感的，這意味著  myVar  和  myvar  被視為兩個不同的變數。 \n \n \n 避免使用容易混淆的字母 ：如  l （小寫字母L）、 O （大寫字母O）和  I （大寫字母I），因為它們容易與數字  1  和  0  混淆。 \n \n \n 命名慣例 ：通常使用  snake_case （小寫字母加底線）來命名變數和函數； CamelCase  用於類別名稱；常數則使用全大寫字母（ UPPERCASE ）。 \n \n \n 總結來說，變數命名需要遵循基本語法規則，並盡量使用清晰且具描述性的名稱，避免與 Python 保留字和內建函數名稱衝突。 \n \n 心得； 這次是特過 Brython 頁面、SciTE 編輯器、命令提示字元視窗、Jupyter Lab 以及 Codespaces去驗算微積分及物理題目，雖然還不太熟悉但透過gpt慢慢了解做出來了，獲得蠻多經驗的 \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w11_hw', 'text': '以下影片說明如何利用近端可攜系統維護個人作業網站: \n \n 1.\xa0 已知可以用 Python 程式 由上往下列印三角形 * , 或 由左往右列印三角形 * , 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL) \n 第一題解答: *號圓形 \n import math\n\n# 圓心 (5, 5) 和半徑 4\ncenter_x = 5\ncenter_y = 5\nradius = 4\n\n# 10x10 的字元區域\nsize = 10\n\nfor y in range(size):\n    row = \'\'\n    for x in range(size):\n        # 計算 (x, y) 到圓心的距離，若距離小於等於半徑則印星號\n        if math.sqrt((x - center_x) ** 2 + (y - center_y) ** 2) <= radius:\n            row += \'＊\'\n        else:\n            row += \'\u3000\'  # 全形空格\n    print(row)\n \n \u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\n\u3000\u3000\u3000\u3000\u3000＊\u3000\u3000\u3000\u3000\n\u3000\u3000\u3000＊＊＊＊＊\u3000\u3000\n\u3000\u3000＊＊＊＊＊＊＊\u3000\n\u3000\u3000＊＊＊＊＊＊＊\u3000\n\u3000＊＊＊＊＊＊＊＊＊\n\u3000\u3000＊＊＊＊＊＊＊\u3000\n\u3000\u3000＊＊＊＊＊＊＊\u3000\n\u3000\u3000\u3000＊＊＊＊＊\u3000\u3000\n\u3000\u3000\u3000\u3000\u3000＊\u3000\u3000\u3000\u3000\n\n \n 2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域. \n 第二題解答: 網頁上的方格與塗色 \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=400, height=400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 每一格的 pixel 數\ngs = 20\n\n# 定義畫布與格子大小\nwidth, height = 10, 10  # 共 10x10 的方格\nctx = canvas.getContext("2d")\n\ndef dRect(lux, luy, w, h, s=1, c=\'lightgrey\'):\n    """繪製單格的矩形框"""\n    ctx.lineWidth = s\n    ctx.strokeStyle = c\n    ctx.beginPath()\n    ctx.rect(lux, luy, w, h)\n    ctx.stroke()\n\ndef grid(width, height, grid_pix):\n    """繪製方格網格"""\n    for i in range(width):\n        for j in range(height):\n            dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1)\n\ndef fill(x, y, color):\n    """填滿指定格子"""\n    ctx.fillStyle = color\n    ctx.fillRect(x * gs, y * gs, gs, gs)\n\n# 繪製整個方格\ngrid(width, height, gs)\n\n# 定義圓心與半徑（單位：格子）\ncenter_x, center_y = 5, 5  # 圓心在第 5 格 (索引從 0 開始)\nradius = 4\n\n# 繪製圓形區域\nfor x in range(width):\n    for y in range(height):\n        # 計算中心到格子中心的距離\n        distance = ((x + 0.5 - center_x) ** 2 + (y + 0.5 - center_y) ** 2) ** 0.5\n        if distance <= radius:  # 如果距離小於等於半徑，填滿格子\n            fill(x, y, "black")\n \n \n 3. 完成上列題目後, 請利用 Youtube 影片 簡報 個人的解題過程與心得. \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w12_hw', 'text': '請各組組員分別利用\xa0 Brython 以及 Jupyter lab \xa0環境, 執行 可攜程式 \xa0notebook 目錄中的\xa0 01_string_input_print.ipynb 至\xa010_for_search.ipynb \xa0筆記本程式, 完成後請將能在 Brython 執行的程式碼存入個人\xa0 Gist \xa0後, 將各程式執行連結放入 w12_hw 網頁上. 最後請說明各範例中所使用的程式語法以及執行心得. \n 第五題: 05_list_index_pop_insert \n 範例: 點菜 \n todays_menu = ["burger", "salad", "coke"]                   #設定一個串列到變數裡\nprint(todays_menu)                                                    #列印todays_menu變數\nside_dish_index = todays_menu.index("salad")            #使用index尋找串列裡有沒有相同的元素\nprint (side_dish_index)                                               #如果有則顯示1反之顯示錯誤信息\ntodays_menu.pop(side_dish_index)                             #使用index所回傳的值"1"後再利用pop刪除索引值"1"的元素\nprint (todays_menu)                                                   #列印刪除元素過後的串列\ntodays_menu.insert(side_dish_index, "fries")              #使用index所回傳的值"1"後再利用insert加入索引值為"1"的新元素\nprint (todays_menu)                                                   #列印加入元素過後的串列 \n [\'burger\', \'salad\', \'coke\']\n1\n[\'burger\', \'coke\']\n[\'burger\', \'fries\', \'coke\'] \n 第六題:06_list_slicing \n 範例: 城市 \n cities = ["San Diego", "Prague", "Cape Town", "Tokyo", "Melbourne"]#設定一個串列\nprint (cities)       #列印串列裡的元素\nprint (cities[1])    #印出串列裡索引值1的元素\nprint (cities[1:4])  #印出串列裡索引值1~3的元素\nprint (cities[1:4:2])#印出串列裡索引值範圍1~4,間隔2的元素\nprint (cities[0:3])  #印出串列裡索引值0~2的元素\nprint (cities[:3])   #未設定起始索引值默認取0開始,印出串列裡索引值0~2的元素\nprint (cities[2:5])  #印出串列裡索引值2~4的元素\nprint (cities[2:])   #未設定末端索引值默認取到最後,印出串列裡索引值2~最後的元素\nprint (cities[0:5:2])#印出串列裡索引值範圍0~4,間隔2的元素\nprint (cities[::2])  #印出串列裡索引值從0開始,間隔2的元素\nprint (cities[4])    #印出串列裡索引值4的元素\nprint (cities[-1])   #印出串列裡索引值從後面往前數第1個的元素\nprint (cities[-4:-1])#印出串列裡索引值從後面往前數第4個開始,從後面往前數第2個結束的元素\ncities[3:0:-1]       # 從索引值3（"Tokyo"）往前取值到索引值1（"Prague"），不包含索引值0，步長為-1（倒序取值）\ncities[-2:-5:-1]     # 從倒數第2個元素（"Tokyo"）往前取值到倒數第5個元素（"San Diego"），不包含倒數第5個，步長為-1\nprint (cities[::-1]) # 倒序列印整個串列的元素 \n [\'San Diego\', \'Prague\', \'Cape Town\', \'Tokyo\', \'Melbourne\']\nPrague\n[\'Prague\', \'Cape Town\', \'Tokyo\']\n[\'Prague\', \'Tokyo\']\n[\'San Diego\', \'Prague\', \'Cape Town\']\n[\'San Diego\', \'Prague\', \'Cape Town\']\n[\'Cape Town\', \'Tokyo\', \'Melbourne\']\n[\'Cape Town\', \'Tokyo\', \'Melbourne\']\n[\'San Diego\', \'Cape Town\', \'Melbourne\']\n[\'San Diego\', \'Cape Town\', \'Melbourne\']\nMelbourne\nMelbourne\n[\'Prague\', \'Cape Town\', \'Tokyo\']\n[\'Melbourne\', \'Tokyo\', \'Cape Town\', \'Prague\', \'San Di \n 第七題 \n 07_list_slicing_use \n 範例: 列表操作與切片範例 \n 說明: \n 列表操作：包括元素替換、插入、切片、添加和刪除。 \n 切片功能：使用範圍（ start:end ）或步長（ start:end:step ）選取元素。 \n 刪除列表： del \xa0 可用於刪除特定元素或整個列表。 \n # 定義感官列表\nsenses = ["eyes", "nose", "ears", "tongue", "skin"]\nprint(senses)  # 輸出: [\'eyes\', \'nose\', \'ears\', \'tongue\', \'skin\']\n\n# 將第二個元素 (索引1) 替換為 "smell"\nsenses[1] = "smell"\nprint(senses)  # 輸出: [\'eyes\', \'smell\', \'ears\', \'tongue\', \'skin\']\n\n# 將第四和第五個元素替換為 "taste" 和 "touch"\nsenses[3:5] = ["taste", "touch"]\nprint(senses)  # 輸出: [\'eyes\', \'smell\', \'ears\', \'taste\', \'touch\']\n\n# 使用步長切片替換第一和第三個元素\nsenses[0:3:2] = ["sight", "hearing"]\nprint(senses)  # 輸出: [\'sight\', \'smell\', \'hearing\', \'taste\', \'touch\']\n\n# 定義行星列表\nplanets = ["Mercury", "Mars", "Earth", "Neptune"]\nprint(planets)  # 輸出: [\'Mercury\', \'Mars\', \'Earth\', \'Neptune\']\n\n# 將 "Jupiter" 添加到列表中\nplanets = planets + ["Jupiter"]\nprint(planets)  # 輸出: [\'Mercury\', \'Mars\', \'Earth\', \'Neptune\', \'Jupiter\']\n\n# 在 "Mars" 和 "Earth" 之間插入 "Venus"\nplanets = planets[0:2] + ["Venus"] + planets[2:5]\nprint(planets)  # 輸出: [\'Mercury\', \'Mars\', \'Venus\', \'Earth\', \'Neptune\', \'Jupiter\']\n\n# 在 "Jupiter" 之前添加 "Uranus" 和 "Saturn"\nplanets = planets[:5] + ["Uranus", "Saturn"] + planets[5:]\nprint(planets)  # 輸出: [\'Mercury\', \'Mars\', \'Venus\', \'Earth\', \'Neptune\', \'Uranus\', \'Saturn\', \'Jupiter\']\n\n# 定義房間列表\nhouse = ["kitchen", "dining room", "living room", "bedroom", "bathroom", "garden", "balcony", "terrace"]\nprint(house)  # 輸出: [\'kitchen\', \'dining room\', \'living room\', \'bedroom\', \'bathroom\', \'garden\', \'balcony\', \'terrace\']\n\n# 刪除第二個元素 (索引1)\ndel house[1]\nprint(house)  # 輸出: [\'kitchen\', \'living room\', \'bedroom\', \'bathroom\', \'garden\', \'balcony\', \'terrace\']\n\n# 刪除索引4和5的元素\ndel house[4:6]\nprint(house)  # 輸出: [\'kitchen\', \'living room\', \'bedroom\', \'bathroom\', \'terrace\']\n\n# 使用切片刪除每隔一個的元素\ndel house[::2]\nprint(house)  # 輸出: [\'living room\', \'bathroom\']\n\n# 刪除整個 house 列表\ndel house\n\n# 嘗試打印已刪除的列表會引發錯誤\nprint(house)  # NameError: name \'house\' is not defined\n \n', 'tags': '', 'url': 'w12_hw.html'}, {'title': 'w13_hw', 'text': '在下兩個正方形外圍, 以黑色畫筆畫圓, 並設法在各線條所圍成的封閉區域塗上不同顏色. \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=600, height=600)  # 調整畫布大小以容納圓形\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\nctx = canvas.getContext("2d")\nctx.lineWidth = 1\n\n# 2. 繪製對角線 (藍色) - 只連接第一個矩形的左上角和第一個矩形的右下角\nctx.strokeStyle = \'blue\'  # 設定對角線顏色為藍色\nctx.beginPath()\nctx.moveTo(100, 100)  # 起點為第一個矩形的左上角 (100, 100)\nctx.lineTo(300, 300)  # 終點為第一個矩形的右下角 (300, 300)\nctx.stroke() \n \n from browser import html\nfrom browser import document as doc\n\n# 創建畫布元素\ncanvas = html.CANVAS(width=500, height=500)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 定義圓心中心座標和半徑\nx1, y1 = 200, 200  # 第一個圓的中心座標\nx2, y2 = 300, 300  # 第二個圓的中心座標\nradius = 141.4  # 圓的半徑\n\nctx = canvas.getContext("2d")\n\n# 繪製第一個圓 (黑色邊框)\nctx.beginPath()\nctx.arc(x1, y1, radius, 0, 2 * 3.14159)\nctx.fillStyle = "orange"  # 圓的填充顏色\nctx.fill()\nctx.lineWidth = 2\nctx.strokeStyle = "darkred"  # 圓的邊框顏色\nctx.stroke()\n\n# 繪製第二個圓 (黑色邊框)\nctx.beginPath()\nctx.arc(x2, y2, radius, 0, 2 * 3.14159)\nctx.fillStyle = "mediumaquamarine"  # 圓的填充顏色\nctx.fill()\nctx.lineWidth = 2\nctx.strokeStyle = "darkgreen"  # 圓的邊框顏色\nctx.stroke()\n\n# 填充第一個和第二個圓的交集區域\nctx.save()\nctx.beginPath()\nctx.arc(x1, y1, radius, 0, 2 * 3.14159)\nctx.clip()  # 剪裁到第一個圓\nctx.beginPath()\nctx.arc(x2, y2, radius, 0, 2 * 3.14159)\nctx.fillStyle = "deepskyblue"\nctx.fill()\nctx.restore()\n\n# 繪製第一個正方形 (紅色邊框，紫色填充)\nctx.beginPath()\nctx.rect(100, 100, 200, 200)\nctx.fillStyle = "mediumpurple"  # 第一個正方形的填充顏色\nctx.fill()\nctx.lineWidth = 2\nctx.strokeStyle = "crimson"  # 第一個正方形的邊框顏色\nctx.stroke()\n\n# 繪製第二個正方形 (紅色邊框，粉色填充)\nctx.beginPath()\nctx.rect(200, 200, 200, 200)\nctx.fillStyle = "lightpink"  # 第二個正方形的填充顏色\nctx.fill()\nctx.strokeStyle = "firebrick"  # 第二個正方形的邊框顏色\nctx.stroke()\n\n# 繪製斜線 (藍色)\nctx.beginPath()\nctx.moveTo(100, 100)\nctx.lineTo(300, 300)\nctx.strokeStyle = "royalblue"\nctx.lineWidth = 2\nctx.stroke()\n\n# 繪製圓的邊框 (黑色邊框)\nctx.beginPath()\nctx.arc(x1, y1, radius, 0, 2 * 3.14159)\nctx.strokeStyle = "darkred"  # 圓的邊框顏色\nctx.stroke()\n\nctx.beginPath()\nctx.arc(x2, y2, radius, 0, 2 * 3.14159)\nctx.strokeStyle = "darkgreen"  # 圓的邊框顏色\nctx.stroke()\n \n \n  導入 brython 程式庫  \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'w14_ex', 'text': '程式: 輸入座標畫圓 \n from browser import html\nfrom browser import document as doc\nimport random\nimport math\n\n# 定義一個函式來初始化畫布\ndef initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):\n    """\n    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。\n    返回畫布元素和它的 2D 繪圖上下文。\n    """\n    canvas = html.CANVAS(width=canvas_width, height=canvas_height)\n    brython_div = doc[id]  # 獲取指定 id 的 div 元素\n    brython_div <= canvas  # 將 canvas 插入到該 div 中\n    \n    ctx = canvas.getContext("2d")\n    \n    return canvas, ctx\n\n# 定義一個隨機顏色生成函式\ndef random_color_generator():\n    """\n    生成一個隨機的 RGB 顏色字符串。\n    """\n    r = random.randint(0, 255)  \n    g = random.randint(0, 255)  \n    b = random.randint(0, 255)  \n    return f"rgb({r}, {g}, {b})"  \n\n# 判斷點 (px, py) 是否在圓內\ndef is_point_in_circle(px, py, cx, cy, r):\n    """\n    判斷一個點 (px, py) 是否位於圓 (cx, cy, r) 內。\n    """\n    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2\n\n# 使用者設定的圓心坐標和半徑，并進行塗色\ndef draw_circles(circles):\n    """\n    根據傳入的圓列表，繪制圓形並使用塗色法填充區域。\n    """\n    canvas, ctx = initialize_canvas(400, 400)\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n    \n    color_dict = {}\n    \n    for py in range(0, canvas.height):\n        for px in range(0, canvas.width):\n            in_circles = [is_point_in_circle(px, py, cx, cy, r) for cx, cy, r in circles]\n            \n            area = None\n            if sum(in_circles) == 3:\n                area = "intersection_all"\n            elif in_circles[0] and in_circles[1]:\n                area = "intersection_1_2"\n            elif in_circles[0] and in_circles[2]:\n                area = "intersection_1_3"\n            elif in_circles[1] and in_circles[2]:\n                area = "intersection_2_3"\n            elif in_circles[0]:\n                area = "circle1"\n            elif in_circles[1]:\n                area = "circle2"\n            elif in_circles[2]:\n                area = "circle3"\n            else:\n                area = "background"\n            \n            if area not in color_dict:\n                color_dict[area] = random_color_generator() if area != "background" else "white"\n            \n            ctx.fillStyle = color_dict[area]\n            ctx.fillRect(px, py, 1, 1)\n\n# 使用者輸入圓心和半徑\ncircles = []\nfor i in range(3):\n    x = int(input(f"輸入圓{i+1}的x坐標: "))\n    y = int(input(f"輸入圓{i+1}的y坐標: "))\n    r = int(input(f"輸入圓{i+1}的半徑: "))\n    circles.append((x, y, r))\n\n# 呼叫畫圓函式，並繪製三個圓\ndraw_circles(circles)\n \n', 'tags': '', 'url': 'w14_ex.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n \xa0 \xa0\xa0 \n \xa0 \xa0 \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'w9-1', 'text': "#help(range)\nfor i in range(1,6,2):\n    print(i)\ndef print_pyramid(n):\n    for i in range(n):\n        # 打印空格\n        print(' ' * (n - i - 1), end='')\n        # 打印星号\n        print('*' * (2 * i + 1))\n        # 设置金字塔的高度\nheight = 5\nprint_pyramid(height)\n \n 1\n3\n5\n    *\n   ***\n  *****\n *******\n********* \n \n \n", 'tags': '', 'url': 'w9-1.html'}, {'title': 'w9-2', 'text': '\n from coppeliasim_zmqremoteapi_client import RemoteAPIClient\nimport time\nimport keyboard\n\n# 利用 zmqRemoteAPI 以 23000 對場景伺服器進行連線\nclient = RemoteAPIClient(\'192.168.0.11\', 23000)\n# 以 getObject 方法取得場景物件\nsim = client.getObject(\'sim\')\nbox = sim.getObject(\'/box\')\n\n# 啟動模擬\nsim.startSimulation()\n\n# 設定立方體的尺寸和初始位置\ncube_size = 0.2  # 20 cm\nspacing = 0.5  # 50 cm 之間的距離（可根據需求調整）\n\n# 擺放立方體的行數和每行的數量\nrows = 5  # 從第 1 行到第 5 行\ncubes_in_row = [1, 3, 5, 7, 9]  # 每行立方體的數量\n\n# 在正的 Y 方向擺放立方體\nfor row in range(rows):\n    # 計算每行的起始 x 位置，讓其對稱\n    start_row_x = - (cubes_in_row[row] - 1) * spacing / 2\n    \n    for col in range(cubes_in_row[row]):\n        # 計算每個立方體的位置\n        x_position = start_row_x + col * spacing\n        y_position = row * spacing  # 垂直方向上每行間距\n        \n        # 建立立方體\n        cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size, cube_size, cube_size], 0)\n        sim.setObjectPosition(cube_handle, -1, [x_position, y_position, cube_size / 2])  # z 方向上升到立方體的中心\n\n# 在負的 Y 方向擺放立方體\nfor row in range(rows):\n    # 計算每行的起始 x 位置，讓其對稱\n    start_row_x = - (cubes_in_row[row] - 1) * spacing / 2\n    \n    for col in range(cubes_in_row[row]):\n        # 計算每個立方體的位置\n        x_position = start_row_x + col * spacing\n        y_position = -row * spacing  # 負的 Y 方向\n        \n        # 建立立方體\n        cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size, cube_size, cube_size], 0)\n        sim.setObjectPosition(cube_handle, -1, [x_position, y_position, cube_size / 2])  # z 方向上升到立方體的中心\n\n# 完成立方體的擺放\nprint("立方體已成功擺放!")\n\n# 設定主迴圈\nwhile True:\n    # 在這裡可以進行其他模擬操作\n    time.sleep(0.1)  # 確保循環不會過快\n\n    if keyboard.is_pressed(\'q\'):\n        # 可以按下 q 鍵跳出重複執行迴圈\n        break\n\n# 終止模擬\nsim.stopSimulation() \n \n', 'tags': '', 'url': 'w9-2.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n \n \n \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};